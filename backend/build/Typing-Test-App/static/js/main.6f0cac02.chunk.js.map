{"version":3,"sources":["assets/B&B.png","components/Card.js","components/test.component.js","components/CreateQuote.component.js","components/quotes.component.js","components/login.component.js","themes/light.js","themes/dark.js","components/Container.js","components/NavIcon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","div","props","theme","colors","cardBackground","TestInput","input","attrs","type","TypingTest","onInputChange","bind","compare","resetTest","endTest","startTimer","calculateWPM","calculateHighScore","backspace","escFunction","debugToggle","renderTooltip","newTest","state","quote","quote_Title","quote_body","quote_author","user_input","quote_words","char_array","current_quote_char","typed_chars","current_quote_word","count","error_count","total_error_count","input_disabled","quote_left","quote_right","quote_error","quote_start","err_arr","quote_class","tInterval","seconds","netWPM","accuracy","highestAcc","highestWPM","apiUrl","debug","query","this","location","id","APIURL","setState","axios","get","then","response","data","quoteTitle","quoteBody","Array","from","quoteAuthor","catch","err","console","log","document","addEventListener","removeEventListener","event","keyCode","e","length","interval","setInterval","key","slice","current_char","getElementById","value","words","chars","body","split","clearInterval","focus","correctChars","lastWPM","lastAccuracy","activeElement","blur","Math","ceil","latestAccuracy","latestWPM","minutes","errors","popper","elements","reference","Tooltip","className","Card","Row","Col","sm","Alert","variant","onKeyDown","disabled","OverlayTrigger","placement","delay","show","hide","overlay","name","Button","onClick","style","marginLeft","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","class","fill-rule","float","Collapse","in","Heading","Component","SearchInput","placeholder","Quote","to","pathname","_id","color","Link","quoteUser","QuoteList","search","quotesList","quotes","map","currentQuote","i","index","filteredQuotes","filter","toLowerCase","indexOf","onChange","Login","login","method","url","responseType","Form","Group","Label","Control","background","buttonBackground","textColor","buttonColor","Svg","svg","App","stored","localStorage","getItem","useState","isDarkMode","setIsDarkMode","darkTheme","lightTheme","Container","Navbar","collapseOnSelect","expand","bg","sticky","NavbarBrand","NavIcon","Toggle","aria-controls","Nav","NavDropdown","title","Item","href","Divider","setItem","path","exact","component","CreateQuote","Quotes","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6f0cac02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/B&B.352de28d.png\";","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  background: ${props => props.theme.colors.cardBackground};\r\n  padding: 24px;\r\n  border-radius: 5px;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  min-height: 100px;\r\n`;","import React, { Component } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Collapse from 'react-bootstrap/Collapse';\r\nimport Button from 'react-bootstrap/Button';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport Card from './Card'\r\n\r\n\r\nconst TestInput = styled.input.attrs(props => ({\r\n    type : 'text',\r\n    \r\n}))`\r\n    background: white;\r\n    border-radius: 5px;\r\n    border: 1px solid darkgray;\r\n\r\n    :: disabled\r\n`\r\n\r\nexport default class TypingTest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.compare = this.compare.bind(this);\r\n        this.resetTest = this.resetTest.bind(this);\r\n        this.endTest = this.endTest.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.calculateWPM = this.calculateWPM.bind(this);\r\n        this.calculateHighScore = this.calculateHighScore.bind(this);\r\n        this.backspace = this.backspace.bind(this);\r\n        this.escFunction = this.escFunction.bind(this);\r\n        this.debugToggle = this.debugToggle.bind(this);\r\n        this.renderTooltip = this.renderTooltip.bind(this);\r\n        this.newTest = this.newTest.bind(this);\r\n\r\n        this.state = {\r\n            quote: [],\r\n            //The name of the quote\r\n            quote_Title: '',\r\n            // The text body of the quote\r\n            quote_body : '',\r\n            quote_author : '',\r\n            user_input : '',\r\n            // An array of every word in the quote not currently used but might be useful later\r\n            quote_words: [],\r\n            // An array of every character in the quote including spaces\r\n            char_array: [],\r\n            // String that contains the next character to be typed\r\n            current_quote_char: '',\r\n            // String that holds what the user types if they are correct but if it is not correct it is filled correctly by char_array\r\n            typed_chars: '',\r\n            // string that contains the current work to be typed not currently used but might be useful later\r\n            current_quote_word: '',\r\n            // counter that keeps track of the number of user inputs excluding backspace\r\n            count: 0,\r\n            // counter that keeps track of errors, can be decremented if the user corrects their error\r\n            error_count : 0,\r\n            // a total error counter that does not decrement\r\n            total_error_count : 0,\r\n            // boolean to disable input to the text box and display results when the test is over, false == test not over, true == test over\r\n            input_disabled : false,\r\n            // String that contains every thing that has been typed or that the user has passed\r\n            quote_left : '',\r\n            // String that contains everything the user has left to type\r\n            quote_right : '',\r\n            // String that contains correct characters that the user has gotten wrong errors the user has typed\r\n            quote_error : '',\r\n            // The quote placeholder for before the test starts is emptied after the test starts\r\n            quote_start : '',\r\n            // error array that conatins the errors the user has typed\r\n            err_arr : '',\r\n            // string that contains the css class of the current character span so it can be change when there is an error or not\r\n            quote_class : 'quote-current',\r\n            // Interval to time the user\r\n            tInterval : '', \r\n            // number that keeps track of the seconds that have passed since the test started\r\n            seconds : 0,\r\n            // The net words per minute\r\n            netWPM : 0,\r\n            // Accuracy %\r\n            accuracy : 0,\r\n            // Highscores\r\n            highestAcc : 0, \r\n            highestWPM : 0,\r\n\r\n            //api url\r\n            apiUrl : '',\r\n\r\n            debug : false\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        let query = '';\r\n        if (this.props.location.state != null) {\r\n            query = this.props.location.state.id\r\n        }\r\n        else {\r\n            query = 'random';\r\n        }\r\n        let APIURL = ''\r\n        if (process.env.NODE_ENV == 'production') {\r\n            this.setState((state) => ({\r\n                apiUrl : 'jdoyle.ie',\r\n            }))\r\n            APIURL = 'jdoyle.ie'\r\n        } else if (process.env.NODE_ENV == 'development') {\r\n            this.setState((state) => ({\r\n               apiUrl : 'localhost:8080',\r\n            }))\r\n            APIURL = 'localhost:8080'\r\n        }\r\n        // get quote from database and update state\r\n        axios.get('http://'+ APIURL +'/quotes/'+query)\r\n            .then(response => {\r\n                this.setState((state) => ({ \r\n                    quote_Title : response.data.quoteTitle,\r\n                    quote_body : response.data.quoteBody,\r\n                    char_array : Array.from(response.data.quoteBody),\r\n                    current_quote_char : Array.from(response.data.quoteBody)[0],\r\n                    quote_start : response.data.quoteBody,\r\n                    quote_author : response.data.quoteAuthor,\r\n                }))\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            })\r\n\r\n        // add eventListener that checks if the esc key has been pressed on every keydown\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        \r\n    }\r\n\r\n\r\n     \r\n    componentWillUnmount(){\r\n        document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    // startTimer function that is called every second by setInterval in onInputChance() \r\n    // increments seconds by 1 and sets the state.\r\n    startTimer () {\r\n        let seconds = this.state.seconds + 1;\r\n        this.setState((state) => ({\r\n            seconds : seconds,\r\n        }))\r\n    }\r\n\r\n    // escFunction that handles when the escape key is pressed\r\n    escFunction(event){\r\n        if(event.keyCode === 27) {\r\n          this.resetTest();\r\n        }\r\n    }\r\n\r\n    // Function that toggles the debug output\r\n    debugToggle() {\r\n        this.setState((state) => ({\r\n            debug : !state.debug\r\n        })) \r\n    }\r\n\r\n    // Called whenever the user input is changed\r\n    // Sets the state of user_input to the user's input and calls compare with the current word from state.\r\n    onInputChange (e) {\r\n        // edge case if user ends test with error to just end the test if the total number of entries == the quote len.\r\n        if (this.state.count === this.state.char_array.length) {\r\n            this.endTest();\r\n            return\r\n        }\r\n\r\n        // if the key pressed is not backspace and is in the general keys location 0\r\n        if (e.keyCode !== 8 && e.location === 0) {\r\n\r\n            // if the user has started typing yet\r\n            if (this.state.count === 0) {\r\n                //Start timer\r\n                let interval = setInterval(this.startTimer, 1000)\r\n                this.setState ((state) => ({\r\n                    quote_start : '',\r\n                    seconds : 0,\r\n                    tInterval : interval      \r\n                }))\r\n            }\r\n            // update the current user_input state and call compare function\r\n            this.setState({\r\n                user_input : e.key\r\n            }, () => this.compare(this.state.current_quote_char))\r\n        }\r\n        // Backspace conditions for changing the current char, left and right spans     \r\n        else if (e.keyCode === 8 && this.state.err_arr !== '' && this.state.error_count  > 0) {\r\n            // if there are errors and the user presses backspace reduce the error count\r\n            if (this.state.error_count > 0) {\r\n                this.setState ((state) => ({\r\n                    error_count : state.error_count -1,\r\n                }), () => this.backspace())      \r\n            }\r\n            else {\r\n                this.backspace();\r\n            }\r\n        }\r\n    }\r\n\r\n    // backspace function that handles when the user enters a backspace into the input box\r\n    backspace () {\r\n        this.setState ((state) => ({\r\n            err_arr : state.err_arr.slice(0, state.err_arr.length-1),\r\n            count : state.count - 1,\r\n            current_quote_char : state.char_array[state.count -1],\r\n            quote_left : state.typed_chars.slice(0, state.typed_chars.length - state.err_arr.length),\r\n            typed_chars : state.typed_chars.slice(0, -1),\r\n            quote_right :  state.char_array.slice(state.count , state.char_array.length)\r\n        }))      \r\n    }\r\n\r\n    // Called in onInputChange\r\n    // Takes the current word to be typed from state\r\n    // Compares it to the user input\r\n    // Checks the if the word count is equal to the length of the quote_words array; if it is the test is over and endTest() is called.\r\n    // If it is not the state of the current word is changed, the count is incremented and the user_input is set back to empty\r\n    compare (current_char) {\r\n        if (current_char === this.state.user_input) {\r\n            console.log(\"match\");\r\n            if (this.state.count >= this.state.char_array.length -1) {\r\n                this.setState((state) => ({\r\n                    typed_chars: state.typed_chars + state.user_input\r\n                }), () => this.endTest())\r\n            }\r\n            else {\r\n                this.setState((state) => ({\r\n                    current_quote_char : state.char_array[state.count + 1],\r\n                    count: state.count + 1,\r\n                    typed_chars: state.typed_chars + state.user_input,\r\n                    quote_right : state.char_array.slice(state.count+2, state.char_array.length),\r\n                    user_input : '',\r\n                    quote_left : state.typed_chars + state.user_input,\r\n                    err_arr : '',\r\n                    quote_class : 'quote-current',\r\n                }));  \r\n            }\r\n            document.getElementById('input').value = '';\r\n        }\r\n        else {\r\n            this.setState((state) => ({\r\n                err_arr : state.err_arr + state.char_array[state.count],\r\n                current_quote_char : state.char_array[state.count + 1],\r\n                count: state.count + 1,\r\n                quote_class : 'quote-warning',\r\n                typed_chars : state.typed_chars + state.char_array[state.count],\r\n                quote_error :  state.err_arr,\r\n                quote_right : state.char_array.slice(state.count +2, state.char_array.length),\r\n                error_count : state.error_count + 1,\r\n                total_error_count : state.total_error_count + 1,\r\n            }))\r\n        }\r\n    }\r\n\r\n    // Called by newTestBtn \r\n    // queries the db for a random quote and updates the state\r\n    // then calls resettest to reset other counters and timers\r\n    newTest () {\r\n        // get quote from database and update state\r\n        axios.get('http://' + this.state.apiUrl + '/quotes/random')\r\n            .then(response => {\r\n                this.setState((state) => ({ \r\n                    quote_Title : response.data.quoteTitle,\r\n                    quote_body : response.data.quoteBody,\r\n                    char_array : Array.from(response.data.quoteBody),\r\n                    current_quote_char : Array.from(response.data.quoteBody)[0],\r\n                    quote_start : response.data.quoteBody,\r\n                    quote_author : response.data.quoteAuthor\r\n                }))\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            })\r\n        this.resetTest()\r\n    }\r\n\r\n    //Called whenever the reset button is pressed\r\n    //Resets the test by resetting the state to default.\r\n    resetTest () {\r\n        let body = this.state.quote_body;\r\n        let words = [];\r\n        let chars = [];\r\n        words = body.split(\" \");\r\n        chars = Array.from(body);\r\n        clearInterval(this.state.tInterval);\r\n        document.getElementById('input').value = '';\r\n        document.getElementById('input').focus();\r\n\r\n        this.setState((state) => ({\r\n            quote_Title: state.quote_Title,\r\n            quote_body : state.quote_body, \r\n            quote_words : words,\r\n            current_quote_word : words[0],\r\n            char_array : chars,\r\n            quote_start : state.quote_body,\r\n            current_quote_char : state.char_array[0],\r\n            err_arr : '',\r\n            user_input : '',\r\n            quote_left : '',\r\n            quote_right : '',\r\n            typed_chars : '',\r\n            error_count : 0,\r\n            quote_class : 'quote_current',\r\n            quote_error : '',\r\n            total_error_count : 0,\r\n            count: 0,\r\n            seconds : 0,\r\n            input_disabled : false,\r\n        }))\r\n    }\r\n\r\n    // Called when the end of the test is reached in compare()\r\n    // Calculates word per minute\r\n    endTest () {\r\n        clearInterval(this.state.tInterval);\r\n        let correctChars = this.state.char_array.length - this.state.total_error_count;\r\n\r\n        let lastWPM = this.state.netWPM;\r\n        let lastAccuracy = this.state.accuracy;\r\n        \r\n        document.activeElement.blur();\r\n        document.getElementById('input').focus();\r\n        this.setState((state) => ({\r\n            error_count : state.error_count,\r\n            accuracy : Math.ceil((correctChars / state.char_array.length)*100),\r\n            input_disabled : true,\r\n            current_quote_char : '',\r\n            quote_left : state.quote_body,\r\n            seconds : 0,\r\n            err_arr : '',\r\n            netWPM : Math.ceil(this.calculateWPM()),\r\n        }), () => this.calculateHighScore(lastAccuracy, lastWPM))\r\n    }\r\n\r\n    // Function that updates the user's high score is the latest score was better than the last replace the scores\r\n    calculateHighScore (lastAccuracy, lastWPM) {\r\n        let latestAccuracy = this.state.accuracy;\r\n        let latestWPM = this.state.netWPM;\r\n\r\n        if (latestWPM > lastWPM) {\r\n            this.setState({\r\n                highestAcc : latestAccuracy,\r\n                highestWPM : latestWPM\r\n            })\r\n        }\r\n    }\r\n\r\n    // calculateWPM function calculates the user's WPM and returns the netWPM\r\n    calculateWPM () {\r\n        let seconds = this.state.seconds;\r\n        let minutes = seconds/60;\r\n        let errors = this.state.error_count;\r\n        let typedEntries = this.state.typed_chars.length;\r\n        let grossWPM = (typedEntries/5) / minutes;\r\n        let netWPM = grossWPM - (errors/minutes);\r\n        // Now do it all in one line for Duggan\r\n        //netWPM = ((this.state.typed_chars.length/5) / (this.state.seconds/60)) - (this.state.error_count/(this.state.seconds/60))\r\n        return netWPM\r\n    }\r\n\r\n    // function to render button tooltips\r\n    renderTooltip(props) {\r\n        if (props.popper.state != null) {\r\n            //console.log(props.popper.state.elements)\r\n\r\n            if (props.popper.state.elements.reference.id === 'restartBtn') {\r\n                return (\r\n                    <Tooltip id=\"button-tooltip\" {...props}>\r\n                        Restart Test\r\n                    </Tooltip>\r\n                );\r\n            } else if (props.popper.state.elements.reference.id === 'newTestBtn') {\r\n                return (\r\n                    <Tooltip id=\"button-tooltip\" {...props}>\r\n                        Start New Test\r\n                    </Tooltip>\r\n                );\r\n            } else if (props.popper.state.elements.reference.id === 'debugBtn') {\r\n                return (\r\n                    <Tooltip id=\"button-tooltip\" {...props}>\r\n                        Show debug Info\r\n                    </Tooltip>\r\n                )\r\n            } \r\n        }\r\n        return  (\r\n            <Tooltip {...props}>\r\n                tes\r\n            </Tooltip>\r\n        )     \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Card>\r\n                   \r\n                    \r\n                        <Row>\r\n                            <Col sm={8}>\r\n                                <h4>{this.state.quote_Title} - {this.state.quote_author}</h4>\r\n                                <Alert variant=\"secondary\">       \r\n                                    <span className=\"quote-left\">{this.state.quote_left}</span>\r\n                                    <span className=\"quote-error\">{this.state.err_arr}</span>\r\n                                    <span className={this.state.quote_class}>{this.state.current_quote_char}</span>\r\n                                    <span className=\"quote-start\">{this.state.quote_start.slice(1)}</span>\r\n                                    <span className=\"quote-right\">{this.state.quote_right}</span>\r\n                                </Alert>    \r\n                            </Col>\r\n                            <Col sm={4}>\r\n                                <h4>High Scores</h4>\r\n                                <Alert variant=\"info\">\r\n                                    <span>\r\n                                        WPM : {this.state.highestWPM} <br></br>\r\n                                        Accuracy : {this.state.highestAcc}% <br></br>\r\n                                    </span>       \r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <h5>Current Character: {this.state.current_quote_char}</h5>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col sm={8}>\r\n                                <TestInput  onKeyDown={this.onInputChange} id='input' disabled={this.state.input_disabled}/>\r\n                                <OverlayTrigger placement=\"top\" delay={{ show: 250, hide: 400 }} overlay={this.renderTooltip} name=\"restartOverlay\">\r\n                                    <Button onClick={this.resetTest} style={{marginLeft: 10}} variant=\"secondary\" id=\"restartBtn\">\r\n                                        <svg className=\"bi bi-arrow-repeat\" width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                            <path fillRule=\"evenodd\" d=\"M2.854 7.146a.5.5 0 00-.708 0l-2 2a.5.5 0 10.708.708L2.5 8.207l1.646 1.647a.5.5 0 00.708-.708l-2-2zm13-1a.5.5 0 00-.708 0L13.5 7.793l-1.646-1.647a.5.5 0 00-.708.708l2 2a.5.5 0 00.708 0l2-2a.5.5 0 000-.708z\" clipRule=\"evenodd\"/>\r\n                                            <path fillRule=\"evenodd\" d=\"M8 3a4.995 4.995 0 00-4.192 2.273.5.5 0 01-.837-.546A6 6 0 0114 8a.5.5 0 01-1.001 0 5 5 0 00-5-5zM2.5 7.5A.5.5 0 013 8a5 5 0 009.192 2.727.5.5 0 11.837.546A6 6 0 012 8a.5.5 0 01.501-.5z\" clipRule=\"evenodd\"/>\r\n                                        </svg>\r\n                                    </Button>\r\n                                </OverlayTrigger>\r\n                                <OverlayTrigger placement=\"top\" delay={{ show: 250, hide: 400 }} overlay={this.renderTooltip}>\r\n                                    <Button onClick={this.newTest} variant=\"info\" style={{marginLeft : 10}} id=\"newTestBtn\" name=\"newTestBtn\">\r\n                                        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" class=\"bi bi-plus\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                            <path fill-rule=\"evenodd\" d=\"M8 3.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H4a.5.5 0 0 1 0-1h3.5V4a.5.5 0 0 1 .5-.5z\"/>\r\n                                            <path fill-rule=\"evenodd\" d=\"M7.5 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H8.5V12a.5.5 0 0 1-1 0V8z\"/>\r\n                                        </svg>\r\n                                    </Button>\r\n                                </OverlayTrigger>\r\n                                \r\n                            </Col>\r\n                            <Col sm={4}>\r\n                                <OverlayTrigger placement=\"left\" delay={{ show: 250, hide: 400 }} overlay={this.renderTooltip}>\r\n                                    <Button onClick={this.debugToggle} variant=\"outline-warning\" style={{float : \"right\"}} id=\"debugBtn\" name=\"debugBtn\">\r\n                                        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-bug\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" >\r\n                                            <path fillRule=\"evenodd\" d=\"M4.355.522a.5.5 0 0 1 .623.333l.291.956A4.979 4.979 0 0 1 8 1c1.007 0 1.946.298 2.731.811l.29-.956a.5.5 0 1 1 .957.29l-.41 1.352A4.985 4.985 0 0 1 13 6h.5a.5.5 0 0 0 .5-.5V5a.5.5 0 0 1 1 0v.5A1.5 1.5 0 0 1 13.5 7H13v1h1.5a.5.5 0 0 1 0 1H13v1h.5a1.5 1.5 0 0 1 1.5 1.5v.5a.5.5 0 1 1-1 0v-.5a.5.5 0 0 0-.5-.5H13a5 5 0 0 1-10 0h-.5a.5.5 0 0 0-.5.5v.5a.5.5 0 1 1-1 0v-.5A1.5 1.5 0 0 1 2.5 10H3V9H1.5a.5.5 0 0 1 0-1H3V7h-.5A1.5 1.5 0 0 1 1 5.5V5a.5.5 0 0 1 1 0v.5a.5.5 0 0 0 .5.5H3c0-1.364.547-2.601 1.432-3.503l-.41-1.352a.5.5 0 0 1 .333-.623zM4 7v4a4 4 0 0 0 3.5 3.97V7H4zm4.5 0v7.97A4 4 0 0 0 12 11V7H8.5zM12 6H4a3.99 3.99 0 0 1 1.333-2.982A3.983 3.983 0 0 1 8 2c1.025 0 1.959.385 2.666 1.018A3.989 3.989 0 0 1 12 6z\"/>\r\n                                        </svg>\r\n                                    </Button>\r\n                                </OverlayTrigger>\r\n                            </Col>\r\n                        </Row><br></br>\r\n                        \r\n                        <Row> \r\n                            <Col sm={8}>\r\n                                <Collapse in={this.state.input_disabled}>\r\n                                    <div id=\"results\">\r\n                                        <Alert variant=\"success\">\r\n                                            <Alert.Heading>Well Done!</Alert.Heading>\r\n                                                <p>\r\n                                                    Here are your results:<br></br>\r\n                                                    WPM : {this.state.netWPM} <br></br>\r\n                                                    Accuracy : {this.state.accuracy}% <br></br>\r\n                                                    Errors : {this.state.total_error_count}<br></br>\r\n                                                    Corrected Errors : {this.state.error_count}\r\n                                                </p>\r\n                                        </Alert>\r\n                                    </div>          \r\n                                </Collapse>\r\n                            </Col>\r\n                            <Col sm={4}>\r\n                                <Collapse in={this.state.debug}>\r\n                                    <div>\r\n                                        <Alert variant=\"warning\">\r\n                                            <Alert.Heading>Debug</Alert.Heading>\r\n                                            <p>\r\n                                                Error array : {this.state.err_arr}<br></br>\r\n                                                quote length : {this.state.char_array.length}<br></br>\r\n                                                Input count : {this.state.count}<br></br>\r\n                                                Error Count : {this.state.error_count}<br></br>\r\n                                                Total Error Count : {this.state.total_error_count}<br></br>\r\n                                                Previous character : {this.state.char_array[this.state.count-1]}<br></br>\r\n                                                Current character : {this.state.char_array[this.state.count]}<br></br>\r\n                                                Next character : {this.state.char_array[this.state.count+1]}<br></br> \r\n                                                Quote left : {this.state.quote_left}<br></br>\r\n                                                Quote green : {this.state.current_quote_char}<br></br>\r\n                                                Quote right : {this.state.quote_right}<br></br>\r\n                                                Quote error : {this.state.quote_error}\r\n                                            </p>\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Collapse>      \r\n                            </Col>\r\n                        </Row> \r\n                </Card>    \r\n                <div style={{ height : 800}}></div>\r\n            </div>  \r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport BoldAndBrash from '../assets/B&B.png'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport default class TypingTest extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <br></br>\r\n                    <Row>\r\n                        <Col sm={8}>\r\n                            <h4>Create Quote -- Coming Soon</h4>\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n                {/**<Image src={BoldAndBrash} fluid /> */}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport axios from 'axios';\r\nimport Card from \"./Card\";\r\nimport styled from 'styled-components';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SearchInput = styled.input.attrs(props => ({\r\n    type : 'text',\r\n    placeholder : ' Search: Title, Author, User'\r\n    \r\n}))`\r\n    background: white;\r\n    border-radius: 5px;\r\n    border: 1px solid darkgray;\r\n    height : 35px;\r\n    margin-left : 80px;\r\n    width : 230px;\r\n    float: right;\r\n    :: disabled\r\n`\r\n\r\n// Quote component\r\nconst Quote = props => (\r\n    <div>\r\n        <Alert variant=\"secondary\">\r\n            <Link to={{ pathname : '/', state: { id : props.quote._id }}} style={{color : '#202326'}}>\r\n                <Alert.Heading>{props.quote.quoteTitle} -{props.quote.quoteAuthor}</Alert.Heading>\r\n            </Link>\r\n            <span>{props.quote.quoteBody}</span>\r\n            <hr />\r\n            <Row>\r\n                <Col sm={8}>\r\n                    <span>Added by: <Alert.Link>{props.quote.quoteUser}</Alert.Link></span>\r\n                </Col>\r\n                <Col sm={4}>\r\n                    <div style={{float : 'right'}}>\r\n                        <Alert.Link  variant=\"outline-seconary\">\r\n                            Suggest Edit\r\n                        </Alert.Link>\r\n                    </div>\r\n                </Col>\r\n            </Row>    \r\n        </Alert>\r\n        <br></br>\r\n    </div>  \r\n)\r\n\r\nexport default class QuoteList extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.search = this.search.bind(this);\r\n        this.quotesList = this.quotesList.bind(this);\r\n\r\n        this.state = {\r\n            quotes: [],\r\n            search : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        let APIURL = ''\r\n        if (process.env.NODE_ENV == 'production') {\r\n            APIURL = 'jdoyle.ie'\r\n        } else if (process.env.NODE_ENV == 'development') { \r\n            APIURL = 'localhost:8080'\r\n        }\r\n        axios.get('http://' + APIURL + '/quotes')\r\n            .then(response => {\r\n                this.setState({ quotes : response.data});\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    quotesList(quotesList) {\r\n        return quotesList.map(function(currentQuote, i){\r\n            return <Quote quote={currentQuote} key={i} index = {i}  />\r\n        })\r\n    }\r\n\r\n    search() {\r\n        this.setState({\r\n            search : document.getElementById('searchBar').value\r\n        })\r\n        \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        // filter funtion that works so amazingly well without needing more requests\r\n        let filteredQuotes = this.state.quotes.filter(\r\n            (quote) => {\r\n                return  quote.quoteTitle.toLowerCase().indexOf(this.state.search) !== -1 ||\r\n                        quote.quoteAuthor.toLowerCase().indexOf(this.state.search) !== -1 || \r\n                        quote.quoteUser.indexOf(this.state.search) !== -1;\r\n            }\r\n        )\r\n        return (\r\n            <div className=\"container\">\r\n                <Card>\r\n        \r\n                    <Row>\r\n                        <Col sm={8}>\r\n                            <h4>Quotes</h4>  \r\n                        </Col>\r\n                        <Col sm={4}>\r\n                            <SearchInput id=\"searchBar\"  onChange={this.search}></SearchInput>\r\n                        </Col>\r\n                        \r\n                    </Row><br/>\r\n                    <Row>\r\n                        <Col>\r\n                            {this.quotesList(filteredQuotes)}\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Card>\r\n                <div style={{ height : 800}}></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport axios from 'axios';\r\nimport Card from \"./Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form, { FormLabel } from \"react-bootstrap/Form\";\r\nimport styled from 'styled-components';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.login = this.login.bind(this);\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n      \r\n\r\n\r\n    }\r\n\r\n    login() {\r\n        axios({\r\n            method: 'get',\r\n            url: 'http://jdoyle.ie/api/public',\r\n             responseType : 'stream'\r\n        })\r\n        .then(function(response) {\r\n            console.log(response.data)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Card>\r\n        \r\n                \r\n                    <Row>\r\n                        \r\n                        <Col>\r\n                            <Form style={{ width : 250}}>\r\n                                <Form.Group>\r\n                                    <h4>Login</h4>\r\n                                    <Form.Label>User Name: </Form.Label>\r\n                                    <Form.Control \r\n                                        \r\n                                        id = \"inputUserName\"\r\n                                    /><br />\r\n                                    \r\n                                    <Form.Label>Password: </Form.Label>\r\n                                    <Form.Control\r\n                                        type = \"password\"\r\n                                        id = \"inputPassword\"\r\n                                    />\r\n                                      \r\n                                </Form.Group>\r\n                                <Button type=\"\" variant=\"secondary\" onClick={this.login}>\r\n                                    Login\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </Card>\r\n                <div style={{ height : 800}}></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","export default {\r\n    colors: {\r\n        background : \"white\",\r\n        cardBackground : \"#white\",\r\n        buttonBackground : \"#5E81AC\",\r\n        textColor : \"black\",\r\n        buttonColor : \"ECEFF4\",\r\n\r\n    },\r\n\r\n    \r\n};","export default {\r\n    colors: {\r\n      background: \"#343A40\",\r\n      cardBackground: \"#3B4252\",\r\n      buttonBackground: \"#d08770\",\r\n      textColor: \"#ECEFF4\",\r\n      buttonColor: \"#2E3440\",\r\n    },\r\n  };","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n    background: ${props => props.theme.colors.background};\r\n    color: ${props => props.theme.colors.textColor};\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0px;\r\n\r\n`;\r\n","import styled from \"styled-components\";\r\nimport React from 'react';\r\n\r\n\r\nconst Svg = styled.svg`\r\n width : 30px;\r\n height : 30px;\r\n alt=\"Typing Test;\r\n`;\r\n\r\nexport default({ className }) => ( \r\n    <Svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-keyboard-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fillRule=\"evenodd\" d=\"M0 6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6zm13 .25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zM2.25 8a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 3 8.75v-.5A.25.25 0 0 0 2.75 8h-.5zM4 8.25A.25.25 0 0 1 4.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 4 8.75v-.5zM6.25 8a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 7 8.75v-.5A.25.25 0 0 0 6.75 8h-.5zM8 8.25A.25.25 0 0 1 8.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 8 8.75v-.5zM13.25 8a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5zm0 2a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5zm-3-2a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h1.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-1.5zm.75 2.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zM11.25 6a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5zM9 6.25A.25.25 0 0 1 9.25 6h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 9 6.75v-.5zM7.25 6a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 8 6.75v-.5A.25.25 0 0 0 7.75 6h-.5zM5 6.25A.25.25 0 0 1 5.25 6h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 5 6.75v-.5zM2.25 6a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h1.5A.25.25 0 0 0 4 6.75v-.5A.25.25 0 0 0 3.75 6h-1.5zM2 10.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zM4.25 10a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h5.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-5.5z\"/>\r\n    </Svg>\r\n)","import React, { useState } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { BrowserRouter as Router, Route, Link} from \"react-router-dom\"; \nimport TypingTest from './components/test.component';\nimport CreateQuote from './components/CreateQuote.component';\nimport Quotes from './components/quotes.component';\nimport Login from './components/login.component';\nimport './App.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavbarBrand from 'react-bootstrap/NavbarBrand';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { ThemeProvider } from \"styled-components\";\nimport lightTheme from \"./themes/light\";\nimport darkTheme from \"./themes/dark\";\n\n\nimport Container from \"./components/Container\";\nimport Button from 'react-bootstrap/Button';\nimport NavIcon from './components/NavIcon';\n\n\nconst App = () => {\n\n  const stored = localStorage.getItem(\"isDarkMode\");\n  \n  const [isDarkMode, setIsDarkMode] = useState( \n    stored === \"true\" ? true : false\n  );\n\n  return (\n    <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n      <Container>\n        \n        <Router>\n        <div className=\"container\">\n            <Navbar collapseOnSelect expand=\"lg\" bg={isDarkMode ? 'dark' : 'light'} variant={isDarkMode ? 'dark' : 'light'} sticky=\"top\">\n              <NavbarBrand>\n                <NavIcon></NavIcon>\n              </NavbarBrand>\n              <NavbarBrand>Typing Test</NavbarBrand>\n              <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n              <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                  <Link to=\"/\" className=\"nav-link\" id=\"navBarText\">Test</Link>\n                  <Link to=\"/quotes\" className=\"nav-link\">Quotes</Link>\n                  <Link to=\"/createQuote\" className=\"nav-link\">Create Quote</Link>\n                  <NavDropdown title=\"Account\">\n                    <NavDropdown.Item href=\"/login\">      \n                        Profile\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-person-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path fill-rule=\"evenodd\" d=\"M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\"/>\n                        </svg> \n                    </NavDropdown.Item>\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item href=\"http://localhost:8080/logout\">Logout\n                      <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-door-closed\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M3 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2zm1 0v13h8V2H4z\"/>\n                        <path d=\"M7 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"/>\n                        <path fill-rule=\"evenodd\" d=\"M1 15.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5z\"/>\n                      </svg>\n                    </NavDropdown.Item>\n                  </NavDropdown>\n                </Nav>\n                <Nav>\n                  <Button variant=\"outline-secondary\" onClick={() => {\n                  setIsDarkMode(!isDarkMode);\n                  localStorage.setItem(\"isDarkMode\", !isDarkMode);\n                  }}>\n                  <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-circle-half\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M8 15V1a7 7 0 1 1 0 14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z\"/>\n                  </svg>\n                </Button>\n                </Nav>\n              </Navbar.Collapse>\n            </Navbar>\n        </div>\n\n          <Route path=\"/\" exact component={TypingTest} />\n          <Route path=\"/createQuote\" component={CreateQuote} />\n          <Route path=\"/quotes\" component={Quotes} />\n          <Route path=\"/login\" component={Login} />\n      \n        </Router>  \n      </Container>\n        \n    </ThemeProvider>\n   \n      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}